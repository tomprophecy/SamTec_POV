from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from job.config.ConfigStore import *
from job.udfs.UDFs import *

def Join_122_left_UnionLeftOuter(spark: SparkSession, in0: DataFrame, in1: DataFrame, ) -> DataFrame:
    return in0\
        .alias("in0")\
        .join(in1.alias("in1"), (col("in0.PartNumber") == col("in1.PartNumber")), "leftouter")\
        .select(col("in1.PreviousQuarterPlatingCost").alias("PreviousQuarterPlatingCost"), col("in0.Plant").alias("Plant"), col("in1.ClosingStandardUnitCost").alias("ClosingStandardUnitCost"), col("in0.Reconciles").alias("Reconciles"), col("in1.PreviousQuarterCustomerSupplied").alias("PreviousQuarterCustomerSupplied"), col("in1.ClosingStandardLaborCost").alias("ClosingStandardLaborCost"), col("in0.ClosingBalance").alias("ClosingBalance"), col("in0.Produced").alias("Produced"), col("in1.PreviousQuarterLaborCost").alias("PreviousQuarterLaborCost"), col("in1.ClosingStandardPlatingCost").alias("ClosingStandardPlatingCost"), col("in1.OpeningStandardUnitCost").alias("OpeningStandardUnitCost"), col("in1.PreviousQuarterPlannerCode").alias("PreviousQuarterPlannerCode"), col("in1.ClosingPlannerCode").alias("ClosingPlannerCode"), col("in1.PreviousQuarterBuyer").alias("PreviousQuarterBuyer"), col("in0.Adjusted").alias("Adjusted"), col("in0.TransferredOut").alias("TransferredOut"), col("in1.PreviousQuarterIsBOM").alias("PreviousQuarterIsBOM"), col("in1.OpeningBuyer").alias("OpeningBuyer"), col("in1.PreviousQuarterUnitCost").alias("PreviousQuarterUnitCost"), col("in1.OpeningPlatingCost").alias("OpeningPlatingCost"), col("in0.Discrepancy").alias("Discrepancy"), col("in1.ClosingLaborCost").alias("ClosingLaborCost"), col("in0.Issued").alias("Issued"), col("in0.TransactedClosingBalance").alias("TransactedClosingBalance"), col("in1.OpeningOrderPolicy").alias("OpeningOrderPolicy"), col("in1.OpeningUnitCost").alias("OpeningUnitCost"), col("in1.ClosingBuyer").alias("ClosingBuyer"), col("in0.PartNumber").alias("PartNumber"), col("in1.PreviousQuarterStandardLaborCost").alias("PreviousQuarterStandardLaborCost"), col("in1.OpeningPlannerCode").alias("OpeningPlannerCode"), col("in1.ClosingUnitCost").alias("ClosingUnitCost"), col("in1.ClosingOrderPolicy").alias("ClosingOrderPolicy"), col("in1.OpeningStandardLaborCost").alias("OpeningStandardLaborCost"), col("in0.TransferredIn").alias("TransferredIn"), col("in0.OpeningBalance").alias("OpeningBalance"), col("in1.OpeningIsBOM").alias("OpeningIsBOM"), col("in0.Purchased").alias("Purchased"), col("in1.OpeningLaborCost").alias("OpeningLaborCost"), col("in0.Facility").alias("Facility"), col("in1.ClosingIsBOM").alias("ClosingIsBOM"), col("in1.ClosingCustomerSupplied").alias("ClosingCustomerSupplied"), col("in1.PreviousQuarterOrderPolicy").alias("PreviousQuarterOrderPolicy"), col("in1.ClostingPlatingCost").alias("ClostingPlatingCost"), col("in1.OpeningCustomerSupplied").alias("OpeningCustomerSupplied"), col("in0.Sold").alias("Sold"), col("in1.PreviousQuarterStandardUnitCost").alias("PreviousQuarterStandardUnitCost"), col("in1.PreviousQuarterStandardPlatingCost").alias("PreviousQuarterStandardPlatingCost"), col("in1.OpeningStandardPlatingCost").alias("OpeningStandardPlatingCost"))
